@startuml connect4_classNotation_classdiagram

package "Types" <<Rectangle>> #aca {
    class Color {
        {static} RED
        {static} GREEN
        {static} YELLOW
        {static} BLUE
        {static} MAGENTA
        {static} CHESTNUT
        {static} NULL
        -string;
        constructor(string) 
        {static} values()
        {static} get(ordinal)
        {static} getRandomColor()
        {static} validateColorCode(colorCode)
        {static} colorsCodeToString()
        getCode()
    }
}

package "Models" <<Rectangle>> #aca {

    class Board {
        MAX_ATTEMPTS
        -secretCombination
        -proposedCombination
        -proposedCombinations
        -results
        constructor(numOfPlayers)
        getSecretCombination()
        newLastProposedCombination()
        getLastProposedCombination()
        getProposedCombination(position)
        getProposedCombinationsLength()
        getResult(position)
        setResult()
        getBlacksAndWhites()
        isLastProposedCombinationAWinner()
        isComplete()
    }

    class Combination {
        {static} COMBINATION_LENGTH
        -value
        constructor()
        getLength()
        setValue(value)
        getValue()
        validateLength()
        validateColors()
        validateUniqueColors()
        getRandomColor()
    }

    class Game {
        {static} STATES
        -board
        -state
        constructor(numPlayers)
        getBoard()
        checkEnd()
        getState()
        setResult()
    }

    class MinimaxProposedCombination extends Combination {
        -impossibleCombination
        -possibleCombination
        constructor()
        accept(visitor)
        setCombination()
        -getInitialMinMaxTable()
        setResult(result)
        {static} getAllCombinations()
        clone()
    }

    class RandomCombination extends Combination{
        constructor()
        accept(visitor)
        setCombination()
    }

    class RandomSecretCombination extends RandomCombination{
        constructor()
        accept(visitor)
    }

    class UserCombination extends Combination{
        constructor()
        accept(visitor)
    }

    class UserProposedCombination extends UserCombination{
        constructor()
        accept(visitor)
        clone()
    }

    class UserSecretCombination extends UserCombination{
        constructor()
        accept(visitor)
    }

    class Result {
        -blacks
        -whites
        -isWinner
        constructor()
        addWhites()
        addBlacks()
        getBlacks()
        getWhites()
        setWinner(combinationLength)
        isWinner()
        equals(result)
        {static} checkBlacksAndWhites(secretCombination, combination)
        {static} hasColor(combination, color)
    }
}

package "Components" <<Rectangle>> #caa {
    class MMBoard{
        {static} GAME_BOARD_ID
        currentCombinationIndexColor
        {static} styles
        {static} properties
        constructor()
        firstUpdated()
        render()
        setColor(e)
        deleteLastColor()
        acceptCombination()
        setBoard()
        set(board)
        setSecretCombination()
        visitRandomSecretCombination()
        visitUserSecretCombination()
        getProposedCombination()
        visitMinimaxProposedCombination()
        visitUserProposedCombination()
        getEmptyCombination()
        -setCurrentCombinationValue(color)
        -getCurrentCombinationValue(value, color)
        -uniqueColor(color)
        displayWinnerLine()
        -dispatchCustomEvent(name)
    }

    class MMCombination{
        -options
        {static} styles
        {static} properties
        constructor()
        render()
        doClickCell(e)
        doAccept()
        doDelete()
        show()
        hide()
        active()
        inactive()
    }

    class MMDialog {
        WELCOME_TEXT
        SELECT_COLORS_TEXT
        COLOR_REPEATED
        FOUR_COLOR
        NO_COLOR
        MISSING_COLORS
        NEW_COMBINATION
        YOU_WON
        YOU_LOST
        {static} styles
        {static} properties
        constructor()
        render()
        writeWelcome()
        write(text)
        writeIfNotWelcome(text)
        writeYouWon()
        writeYouLost()
        writeNewCombination()
    }

    class MMGame {
        {static} styles
        {static} properties
        firstUpdated()
        render()
        set(game)
        checkEnd()
        -writeFinish()
    }

    class MMMain {
        -game
        DEFAULT_PLAYERS
        {static} styles
        constructor()
        render()
        setPlayers(e)
        newGame(numPlayers)
    }

    class MMPlayersSelector {
        {static} styles
        {static} properties
        render()
        setNumPlayers()
    }

    class MMResult {
        -results
        {static} styles
        {static} properties
        constructor()
        render()
        setResult()
    }
}

Board *-down-> RandomSecretCombination
Board *-down-> MinimaxProposedCombination
Board *-down-> UserSecretCombination
Board *-down-> UserProposedCombination
Board *-right-> Result
Board -down[hidden]-> Combination

Combination -d-> Color

MinimaxProposedCombination -> Color
MinimaxProposedCombination -> Result

Game *-down-> Board

MMBoard -> Board
MMBoard -> Color

MMBoard *-down-> MMResult
MMBoard *-down-> MMCombination

MMResult -> Result

MMCombination -d-> Color

MMGame -> Game
MMGame *-down-> MMBoard
MMGame *-down-> MMDialog

MMMain *-> Game
MMMain -d-> MMGame
MMMain -> MMPlayersSelector

indexHtml *-down-> MMMain

@enduml